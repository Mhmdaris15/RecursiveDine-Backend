{
	"info": {
		"_postman_id": "recursive-dine-e2e-tests",
		"name": "RecursiveDine API - Complete E2E Testing",
		"description": "Comprehensive end-to-end testing for RecursiveDine restaurant API including cashier workflow, VAT calculations, and complete order management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Authentication Flow",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": ["{{base_url}}"],
							"path": ["health"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Health check returns 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Health check returns healthy status\", function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(\"healthy\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Register Admin User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Admin User\",\n  \"email\": \"admin@recursivedine.com\",\n  \"phone\": \"+62812345678\",\n  \"password\": \"admin123\",\n  \"role\": \"admin\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "register"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin registration successful\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"admin_token\", responseJson.access_token);",
									"    pm.environment.set(\"admin_user_id\", responseJson.user.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Register Cashier User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Cashier One\",\n  \"email\": \"cashier1@recursivedine.com\",\n  \"phone\": \"+62812345679\",\n  \"password\": \"cashier123\",\n  \"role\": \"cashier\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/register",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "register"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cashier registration successful\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    pm.environment.set(\"cashier_token\", responseJson.access_token);",
									"    pm.environment.set(\"cashier_user_id\", responseJson.user.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Login Admin",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@recursivedine.com\",\n  \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "login"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.environment.set(\"admin_token\", responseJson.access_token);"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Login Cashier",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"cashier1@recursivedine.com\",\n  \"password\": \"cashier123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "login"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cashier login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.environment.set(\"cashier_token\", responseJson.access_token);"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "2. Database Seeding",
			"item": [
				{
					"name": "Seed Database",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/admin/seed",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "admin", "seed"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Database seeding successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test(\"Seeding results contain all entities\", function () {",
									"    pm.expect(responseJson.results).to.have.property('users');",
									"    pm.expect(responseJson.results).to.have.property('tables');",
									"    pm.expect(responseJson.results).to.have.property('categories');",
									"    pm.expect(responseJson.results).to.have.property('menu_items');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "3. Menu Management",
			"item": [
				{
					"name": "Get Menu Categories",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/menu/categories",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "menu", "categories"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Menu categories retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"if (responseJson.length > 0) {",
									"    pm.environment.set(\"category_id\", responseJson[0].id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Full Menu",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/menu",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "menu"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Full menu retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"if (responseJson.length > 0 && responseJson[0].menu_items && responseJson[0].menu_items.length > 0) {",
									"    pm.environment.set(\"menu_item_1_id\", responseJson[0].menu_items[0].id);",
									"    pm.environment.set(\"menu_item_1_price\", responseJson[0].menu_items[0].price);",
									"    if (responseJson[0].menu_items.length > 1) {",
									"        pm.environment.set(\"menu_item_2_id\", responseJson[0].menu_items[1].id);",
									"        pm.environment.set(\"menu_item_2_price\", responseJson[0].menu_items[1].price);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "4. Table Management",
			"item": [
				{
					"name": "Get All Tables (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/admin/tables",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "admin", "tables"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Tables retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"if (responseJson.length > 0) {",
									"    pm.environment.set(\"table_id\", responseJson[0].id);",
									"    pm.environment.set(\"table_qr_code\", responseJson[0].qr_code);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Table by QR Code",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/tables/{{table_qr_code}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "tables", "{{table_qr_code}}"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Table retrieved by QR code successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test(\"Table data is correct\", function () {",
									"    pm.expect(responseJson.qr_code).to.eql(pm.environment.get(\"table_qr_code\"));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "5. Cashier Order Workflow (NEW)",
			"item": [
				{
					"name": "Create Cashier Order with VAT",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cashier_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"table_id\": {{table_id}},\n  \"customer_name\": \"John Doe\",\n  \"cashier_name\": \"Cashier One\",\n  \"special_notes\": \"Extra spicy, no onions\",\n  \"items\": [\n    {\n      \"menu_item_id\": {{menu_item_1_id}},\n      \"quantity\": 2,\n      \"special_request\": \"Extra sauce\"\n    },\n    {\n      \"menu_item_id\": {{menu_item_2_id}},\n      \"quantity\": 1,\n      \"special_request\": \"Well done\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/cashier/orders",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "cashier", "orders"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cashier order created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.environment.set(\"cashier_order_id\", responseJson.order.id);",
									"",
									"pm.test(\"Order contains VAT calculation\", function () {",
									"    pm.expect(responseJson.order).to.have.property('subtotal_amount');",
									"    pm.expect(responseJson.order).to.have.property('vat_amount');",
									"    pm.expect(responseJson.order).to.have.property('total_amount');",
									"});",
									"",
									"pm.test(\"VAT is 10% of subtotal\", function () {",
									"    const subtotal = responseJson.order.subtotal_amount;",
									"    const vat = responseJson.order.vat_amount;",
									"    const expectedVat = subtotal * 0.1;",
									"    pm.expect(Math.abs(vat - expectedVat)).to.be.below(0.01);",
									"});",
									"",
									"pm.test(\"Total amount is subtotal + VAT\", function () {",
									"    const subtotal = responseJson.order.subtotal_amount;",
									"    const vat = responseJson.order.vat_amount;",
									"    const total = responseJson.order.total_amount;",
									"    pm.expect(Math.abs(total - (subtotal + vat))).to.be.below(0.01);",
									"});",
									"",
									"pm.test(\"Customer and cashier names are saved\", function () {",
									"    pm.expect(responseJson.order.customer_name).to.eql(\"John Doe\");",
									"    pm.expect(responseJson.order.cashier_name).to.eql(\"Cashier One\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "6. Regular Order Workflow",
			"item": [
				{
					"name": "Create Regular Order",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"table_id\": {{table_id}},\n  \"special_notes\": \"Customer order via mobile\",\n  \"items\": [\n    {\n      \"menu_item_id\": {{menu_item_1_id}},\n      \"quantity\": 1,\n      \"special_request\": \"Medium spice\"\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/orders",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "orders"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Regular order created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.environment.set(\"regular_order_id\", responseJson.order.id);"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Order Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/orders/{{cashier_order_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "orders", "{{cashier_order_id}}"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Order details retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test(\"Order includes all details\", function () {",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('order_items');",
									"    pm.expect(responseJson).to.have.property('user');",
									"    pm.expect(responseJson).to.have.property('table');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Order Status",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"preparing\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/orders/{{cashier_order_id}}/status",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "orders", "{{cashier_order_id}}", "status"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Order status updated successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test(\"Status is updated\", function () {",
									"    pm.expect(responseJson.order.status).to.eql(\"preparing\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "7. Payment Processing",
			"item": [
				{
					"name": "Process Cash Payment (Cashier)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cashier_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"order_id\": {{cashier_order_id}},\n  \"payment_method\": \"cash\",\n  \"amount_paid\": 50000,\n  \"notes\": \"Cash payment processed by cashier\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/cashier/payments/cash",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "cashier", "payments", "cash"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cash payment processed successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.environment.set(\"payment_id\", responseJson.payment.id);"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Initiate QRIS Payment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"order_id\": {{regular_order_id}},\n  \"payment_method\": \"qris\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/payments/qris",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "payments", "qris"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"QRIS payment initiated successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.environment.set(\"qris_payment_id\", responseJson.payment_id);"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "8. Admin Management",
			"item": [
				{
					"name": "Get All Orders History (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/admin/orders?page=1&limit=10",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "admin", "orders"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All orders retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test(\"Response contains pagination info\", function () {",
									"    pm.expect(responseJson).to.have.property('orders');",
									"    pm.expect(responseJson).to.have.property('total');",
									"    pm.expect(responseJson).to.have.property('page');",
									"    pm.expect(responseJson).to.have.property('limit');",
									"    pm.expect(responseJson).to.have.property('total_pages');",
									"});",
									"",
									"pm.test(\"Orders contain necessary details\", function () {",
									"    if (responseJson.orders && responseJson.orders.length > 0) {",
									"        const order = responseJson.orders[0];",
									"        pm.expect(order).to.have.property('id');",
									"        pm.expect(order).to.have.property('status');",
									"        pm.expect(order).to.have.property('total_amount');",
									"        pm.expect(order).to.have.property('created_at');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get All Orders History (Cashier)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cashier_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/admin/orders?page=1&limit=10",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "admin", "orders"],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cashier can access orders history\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test(\"Response contains orders data\", function () {",
									"    pm.expect(responseJson).to.have.property('orders');",
									"    pm.expect(responseJson).to.have.property('total');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Orders with Status Filter",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/admin/orders?status=preparing&page=1&limit=5",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "admin", "orders"],
							"query": [
								{
									"key": "status",
									"value": "preparing"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Filtered orders retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test(\"All returned orders have correct status\", function () {",
									"    if (responseJson.orders && responseJson.orders.length > 0) {",
									"        responseJson.orders.forEach(order => {",
									"            pm.expect(order.status).to.eql(\"preparing\");",
									"        });",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Order Statistics",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/admin/orders/statistics",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "admin", "orders", "statistics"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Order statistics retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test(\"Statistics contain expected fields\", function () {",
									"    pm.expect(responseJson).to.have.property('total_orders');",
									"    pm.expect(responseJson).to.have.property('total_revenue');",
									"    pm.expect(responseJson).to.have.property('average_order_value');",
									"    pm.expect(responseJson).to.have.property('orders_by_status');",
									"});",
									"",
									"pm.test(\"Orders by status is an object\", function () {",
									"    pm.expect(responseJson.orders_by_status).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Numeric values are valid\", function () {",
									"    pm.expect(responseJson.total_orders).to.be.a('number');",
									"    pm.expect(responseJson.total_revenue).to.be.a('number');",
									"    pm.expect(responseJson.average_order_value).to.be.a('number');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Order Statistics with Date Range",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/admin/orders/statistics?from=2025-08-01&to=2025-08-31",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "admin", "orders", "statistics"],
							"query": [
								{
									"key": "from",
									"value": "2025-08-01"
								},
								{
									"key": "to",
									"value": "2025-08-31"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Date-filtered statistics retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test(\"Statistics for date range are returned\", function () {",
									"    pm.expect(responseJson).to.have.property('total_orders');",
									"    pm.expect(responseJson).to.have.property('total_revenue');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Daily Revenue",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/admin/orders/revenue",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "admin", "orders", "revenue"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Daily revenue retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test(\"Revenue data contains expected fields\", function () {",
									"    pm.expect(responseJson).to.have.property('daily_revenue');",
									"    pm.expect(responseJson).to.have.property('total_revenue');",
									"});",
									"",
									"pm.test(\"Daily revenue is an array\", function () {",
									"    pm.expect(responseJson.daily_revenue).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Daily Revenue with Date Range",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/admin/orders/revenue?from=2025-08-01&to=2025-08-31",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "admin", "orders", "revenue"],
							"query": [
								{
									"key": "from",
									"value": "2025-08-01"
								},
								{
									"key": "to",
									"value": "2025-08-31"
								}
							]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Date-filtered revenue retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test(\"Revenue data for date range is returned\", function () {",
									"    pm.expect(responseJson).to.have.property('daily_revenue');",
									"    pm.expect(responseJson).to.have.property('total_revenue');",
									"});",
									"",
									"pm.test(\"Daily revenue entries contain date and amount\", function () {",
									"    if (responseJson.daily_revenue && responseJson.daily_revenue.length > 0) {",
									"        const entry = responseJson.daily_revenue[0];",
									"        pm.expect(entry).to.have.property('date');",
									"        pm.expect(entry).to.have.property('revenue');",
									"        pm.expect(entry).to.have.property('order_count');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Get Specific Order Details (Admin)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/admin/orders/{{cashier_order_id}}",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "admin", "orders", "{{cashier_order_id}}"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Specific order details retrieved successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test(\"Order details include all necessary information\", function () {",
									"    pm.expect(responseJson).to.have.property('id');",
									"    pm.expect(responseJson).to.have.property('order_items');",
									"    pm.expect(responseJson).to.have.property('user');",
									"    pm.expect(responseJson).to.have.property('table');",
									"    pm.expect(responseJson).to.have.property('status');",
									"    pm.expect(responseJson).to.have.property('total_amount');",
									"});",
									"",
									"pm.test(\"Order items contain menu details\", function () {",
									"    if (responseJson.order_items && responseJson.order_items.length > 0) {",
									"        const item = responseJson.order_items[0];",
									"        pm.expect(item).to.have.property('menu_item');",
									"        pm.expect(item).to.have.property('quantity');",
									"        pm.expect(item).to.have.property('price');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Update Order Status (Admin)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"ready\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/admin/orders/{{cashier_order_id}}/status",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "admin", "orders", "{{cashier_order_id}}", "status"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Order status updated successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test(\"Status is updated to ready\", function () {",
									"    pm.expect(responseJson.status).to.eql(\"ready\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		},
		{
			"name": "9. Error Handling & Edge Cases",
			"item": [
				{
					"name": "Create Order with Invalid Table",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cashier_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"table_id\": 99999,\n  \"customer_name\": \"Test Customer\",\n  \"cashier_name\": \"Test Cashier\",\n  \"items\": [\n    {\n      \"menu_item_id\": {{menu_item_1_id}},\n      \"quantity\": 1\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/cashier/orders",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "cashier", "orders"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid table ID returns error\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test(\"Error message is provided\", function () {",
									"    pm.expect(responseJson).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Create Order with Invalid Menu Item",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cashier_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"table_id\": {{table_id}},\n  \"customer_name\": \"Test Customer\",\n  \"cashier_name\": \"Test Cashier\",\n  \"items\": [\n    {\n      \"menu_item_id\": 99999,\n      \"quantity\": 1\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/cashier/orders",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "cashier", "orders"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid menu item ID returns error\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test(\"Error message is provided\", function () {",
									"    pm.expect(responseJson).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Unauthorized Access to Admin Endpoint",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/admin/orders",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "admin", "orders"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unauthorized access returns 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test(\"Authentication error message is provided\", function () {",
									"    pm.expect(responseJson).to.have.property('error');",
									"    pm.expect(responseJson.error).to.include('authentication');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Invalid Login Credentials",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"invalid@test.com\",\n  \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/auth/login",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "auth", "login"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid credentials return 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test(\"Invalid credentials error message is provided\", function () {",
									"    pm.expect(responseJson).to.have.property('error');",
									"    pm.expect(responseJson.error).to.include('credentials');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Malformed JSON Request",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cashier_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"table_id\": {{table_id}},\n  \"customer_name\": \"Test Customer\",\n  \"cashier_name\": \"Test Cashier\",\n  \"items\": [\n    {\n      \"menu_item_id\": {{menu_item_1_id}},\n      \"quantity\": \"invalid_number\"\n    }\n  \n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/cashier/orders",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "cashier", "orders"]
						}
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Malformed JSON returns 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const responseJson = pm.response.json();",
									"pm.test(\"JSON parsing error message is provided\", function () {",
									"    pm.expect(responseJson).to.have.property('error');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				},
				{
					"name": "Customer Role Access to Admin Endpoint",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/admin/orders/statistics",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "admin", "orders", "statistics"]
						}
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// First register a customer user for this test",
									"const registerRequest = {",
									"  url: pm.environment.get('base_url') + '/api/v1/auth/register',",
									"  method: 'POST',",
									"  header: {",
									"    'Content-Type': 'application/json'",
									"  },",
									"  body: {",
									"    mode: 'raw',",
									"    raw: JSON.stringify({",
									"      name: 'Test Customer',",
									"      email: 'customer@test.com',",
									"      phone: '+1234567890',",
									"      password: 'customer123',",
									"      role: 'customer'",
									"    })",
									"  }",
									"};",
									"",
									"pm.sendRequest(registerRequest, function (err, response) {",
									"  if (response.code === 201) {",
									"    const responseJson = response.json();",
									"    pm.environment.set('customer_token', responseJson.access_token);",
									"  }",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// This test uses admin token, so it should succeed",
									"pm.test(\"Admin can access statistics\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8002",
			"type": "string"
		}
	]
}
